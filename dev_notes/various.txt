// Some coding hints:
// label.editable = true;         // Editing the text automatically updates the model data
// label.cursor = "move";         // Visual hint the user can do something with this node label
// label._isNodeLabel = true;  // Wrong!   See email 9 Jan 2016, 00.37
// label.text = "Hello";                            // Useful to see how the text and alignment 
// label.alignment = new go.Spot(0.5,0.5,-20,0);    // properties can be set explicitly.

/*
    myDiagram.model = go.Model.fromJson(JSON.stringify(
        { "class": "go.GraphLinksModel",
          "linkLabelKeysProperty": "labelKeys",
          "nodeDataArray": [ 
            {"key":"grass", "category":"stock", "label":"Grass", "loc":"27 14", "alignment":"0.5 0.5 0 -22"},
            {"key":"cloud1", "category":"cloud", "label":"Cloud1", "loc":"328 14"},
            {"key":"sheep", "category":"stock", "label":"Sheep", "loc":"29 186", "alignment":"0.5 0.5 0 22"},
            {"key":"cloud2", "category":"cloud", "label":"Cloud2", "loc":"329 184"},
            {"key":"A-B", "category":"valve", "label":"grass_loss", "alignment":"0.5 0.5 0 -20" },
            {"key":"G-D", "category":"valve", "label":"grazing", "alignment":"0.5 0.5 0 20" },
            {"key":"A-G", "category":"valve",  "label":"sheep_loss", "alignment":"0.5 0.5 -50 0" }
          ],
          "linkDataArray": [ 
            {"from":"grass", "to":"cloud1", "category":"flow", "labelKeys":[ "A-B" ]},
            {"from":"sheep", "to":"cloud2", "category":"flow", "labelKeys":[ "G-D" ]},
            {"from":"sheep", "to":"grass", "category":"flow", "labelKeys":[ "A-G" ]},
            {"from":"grass", "to":"G-D", "category":"influence", "labelKeys":[ "A-G-D" ]},
            {"from":"A-B", "to":"G-D", "category":"influence", "labelKeys":[ "A-B-G-D" ]}
          ]
        }
    ));
*/


    // I am using long-winded approach to begin with (as described in 
    // http://gojs.net/latest/intro/buildingObjects.html "Building with Code").  
    // Three main reasons:
    // 1. Personal preference;
    // 2. Because I think it is easier this way to produce customise the templates  
    //    for different node types;
    // 3. Because I think is easier for people who want to understand or adapt this
    //    code, and are not familiar with GoJS's shorthand notation, to relate this 
    //    code to the object reference documentation: all classes and properties are
    //    explicit.
    // 4. I don't like the fact that some properties (compound properties) have to be
    //    quoted, e.g. "undoManager.isEnabled" rather than undoManager.isEnabled.


    // Much easier to attach event listeners to nodes, links etc, so that's what I have done.
    // Will need this for adding new nodes etc.
    // It's tricky to work out what the "subject" is...
/*
    myDiagram.addDiagramListener("ObjectSingleClicked",function(DiagramEvent) {
        part = DiagramEvent.subject.part;
        console.debug(part);
        if (part instanceof go.Node) {
            alert(part.data.key);
            console.debug('node!');
        }
    });
*/


    // Kept to show use of geometryString
    // This implements a selection Adornment that is a vertical bar of node-type buttons
    // that appear when the user clicks on a blank part of the diagram.  Each button has a click
    //  function to insert an instance of that node-type, a tooltip for a textual description.
/*
    var selectionAdornment =
      GOJS(go.Adornment, "Position",
        GOJS(go.Panel, "Auto", {position: new go.Point(15,12)},
          GOJS(go.Shape, { fill: null, stroke: "deepskyblue", strokeWidth: 2 }),
          GOJS(go.Placeholder)
        ),
        GOJS(go.Panel, "Vertical",    
          { defaultStretch: go.GraphObject.Vertical },
          GOJS("Button",
            GOJS(go.Shape,
              { geometryString: "F M0 0 L20 0 20 14 0 14 z",
                fill: "yellow", margin: 3}),
            { click: addCloud, toolTip: makeTooltip("Add cloud") }),
          GOJS("Button" ,
            GOJS(go.Shape,
              { geometryString: "F M0 0 L20 0 20 14 0 14 z", stroke:"red",
                fill: "red", margin: 3}),
            { click: addStock, toolTip: makeTooltip("Add stock") }),
          GOJS("Button",
            GOJS(go.Shape,
              { geometryString: "F M0 0 L20 0 20 14 0 14 z",
                fill: "blue", margin: 3 }),
            { click: addVariable, toolTip: makeTooltip("Add variable") })
        )
      );
*/



// Used during initial development of the node popup:


    // Systo node-type templates
/*
    var stockTemplate =
      GOJS(go.Node, "Auto",  // the Shape will go around the TextBlock
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        GOJS(go.Shape, "RoundedRectangle", {fill:"red"}),
        GOJS(go.TextBlock, {margin:3,text:"Stocky"})
    );

    var cloudTemplate =
      GOJS(go.Node, "Auto",  // the Shape will go around the TextBlock
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        GOJS(go.Shape, "RoundedRectangle", {fill:"yellow"}),
        GOJS(go.TextBlock, {margin:3,text:"Cloudy"})
    );

    var variableTemplate =
      GOJS(go.Node, "Auto",  // the Shape will go around the TextBlock
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        GOJS(go.Shape, "RoundedRectangle", {fill:"blue"}),
        GOJS(go.TextBlock, {margin:3,text:"Var"})
    );

    myDiagram.nodeTemplateMap.add("stock1",stockTemplate);
    myDiagram.nodeTemplateMap.add("cloud1",cloudTemplate);
    myDiagram.nodeTemplateMap.add("variable1",variableTemplate);
*/

/*insert text at caret
http://stackoverflow.com/questions/1064089/inserting-a-text-where-cursor-is-using-javascript-jquery
Contains links to:
http://web.archive.org/web/20110102112946/http://www.scottklarr.com/topic/425/how-to-insert-text-into-a-textarea-where-the-cursor-is/
http://jsfiddle.net/NaHTw/4/

*/

